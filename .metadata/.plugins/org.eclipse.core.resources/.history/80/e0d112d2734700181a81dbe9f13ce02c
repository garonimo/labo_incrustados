#include "msp.h"

#include "driverlib.h"
#include "HAL_I2C.h"
#include "HAL_OPT3001.h"
#include <iostream>



void BlinkLEDs(int l_intBlinkTime)
{
    for(int i = 0; i < l_intBlinkTime; i++);
    P2->OUT ^= BIT0 | BIT1 | BIT2;

    for(int i = 0; i < l_intBlinkTime; i++); //1
    P2->OUT ^= BIT0 | BIT1 | BIT2;

    for(int i = 0; i < l_intBlinkTime; i++);
    P2->OUT ^= BIT0 | BIT1 | BIT2;

    for(int i = 0; i < l_intBlinkTime; i++);//2
    P2->OUT ^= BIT0 | BIT1 | BIT2;

    for(int i = 0; i < l_intBlinkTime; i++);
    P2->OUT ^= BIT0 | BIT1 | BIT2;

    for(int i = 0; i < l_intBlinkTime; i++);//3
    P2->OUT ^= BIT0 | BIT1 | BIT2;

}

void ADC_SetUp()
{
    /* Initializing ADC (MCLK/1/1) */
    ADC14_enableModule();
    ADC14_initModule(ADC_CLOCKSOURCE_MCLK, ADC_PREDIVIDER_1, ADC_DIVIDER_1, 0);

    ADC14_setSampleHoldTrigger(ADC_TRIGGER_SOURCE1, false);

    /* Configuring GPIOs (4.3 A10) */
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P4, GPIO_PIN3,
    GPIO_TERTIARY_MODULE_FUNCTION);

    /* Configuring ADC Memory */
    ADC14_configureSingleSampleMode(ADC_MEM0, true);
    ADC14_configureConversionMemory(ADC_MEM0, ADC_VREFPOS_AVCC_VREFNEG_VSS,
    ADC_INPUT_A10, false);

    /* Set ADC result format to signed binary */
    ADC14_setResultFormat(ADC_SIGNED_BINARY);
}

void ligthSensor_SetUp()
{
    /* Initializes Clock System */
    MAP_CS_setDCOCenteredFrequency(CS_DCO_FREQUENCY_48);
    MAP_CS_initClockSignal(CS_MCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1 );
    MAP_CS_initClockSignal(CS_HSMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1 );
    MAP_CS_initClockSignal(CS_SMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1 );
    MAP_CS_initClockSignal(CS_ACLK, CS_REFOCLK_SELECT, CS_CLOCK_DIVIDER_1);


    /* Initialize I2C communication */
    Init_I2C_GPIO();
    I2C_init();

    /* Initialize OPT3001 digital ambient light sensor */
    OPT3001_init();

    __delay_cycles(100000);
}

void Set_Status()
{

   float l_floatLightSensorValue;
   volatile uint16_t l_uint16SoundSensorValue;

   while(1)
    {

       l_floatLightSensorValue = OPT3001_getLux();

       P2->OUT &= 11111000;

       if (l_floatLightSensorValue < 20)
       {
           P2->OUT |= BIT1;
       }
       else
       {
           P2->OUT |= BIT0;
       }



    }
}

void initialConfiguration()
{
    int l_intBlinkTime = 55000;

    P2->DIR = BIT0 | BIT1 | BIT2;
    P2->OUT = BIT0 | BIT1 | BIT2;

    BlinkLEDs(l_intBlinkTime);

    ligthSensor_SetUp();
    ADC_SetUp();            //Microphone
    //Timer_setUp();        //To set timer
    //Ctrol_button_SetUp(); //To set button
    Set_Status();
}

